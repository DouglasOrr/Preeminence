#!/usr/bin/env python3

import argparse
import os
import subprocess
import sys
import time


IMAGE = 'preeminence'


def sh(cmd, **kwargs):
    shell_cmd = cmd.format(**kwargs)
    if subprocess.call(shell_cmd, shell=True):
        sys.stderr.write('[[./run]] Command failed: {}\n'.format(shell_cmd))
        exit(1)


def docker(cmd, docker_detach=False, docker_args='', **kwargs):
    docker_cmd = cmd.format(**kwargs)
    is_tty = os.isatty(sys.stdin.fileno())
    sh('docker run {mode}'
       ' -v `pwd`:/preem -w /preem -e PYTHONPATH=/preem:/preem/agents'
       ' {docker_args}'
       ' preem {command}',
       command=docker_cmd,
       mode='-d' if docker_detach else ('--rm -i' + (' -t' if is_tty else '')),
       docker_args=docker_args)


def build():
    sh('docker build --rm -t {image} .', image=IMAGE)


def run(args):
    docker(' '.join(args))


def test(slow, filter, verbose):
    docker('pytest {verbose} {cov_or_filter} {deselect}',
           verbose='-v' if verbose else '',
           deselect='' if slow else '--deselect=test_preem.py::test_fuzz',
           cov_or_filter=('-s -k ' + filter
                          if filter else
                          ' --cov=preem --no-cov-on-fail --cov-report term-missing'))


def check():
    test(slow=True, filter=None, verbose=False)
    docker('flake8 *.py run')
    docker('pylint --errors-only *.py run')


def docs(examples, pydoc_only):
    docker('pdoc3 --html --overwrite --html-dir docs preem || true')
    os.rename('docs/preem.html', 'docs/index.html')
    if not pydoc_only:
        docker('jupyter nbconvert --execute --to html Tutorial.ipynb --output-dir docs --output tutorial')
        docker('jupyter nbconvert --execute --to slides --SlidesExporter.reveal_theme=white'
               ' Intro.ipynb --output-dir docs --output intro')
        docker('python3 render_doc_examples.py {}'.format('--force' if examples else ''))


def notebook(port):
    name = '$USER-preem-notebook'
    sh('docker rm -f {name} || true', name=name)
    docker('jupyter notebook --allow-root --port {port} --ip 0.0.0.0',
           docker_detach=True,
           docker_args='--name {name} -p {port}:{port}'.format(port=port, name=name),
           port=port)

    print('Waiting for server to start, so we can tell you your token...')
    time.sleep(3)
    token = subprocess.check_output(
        'docker logs {name} 2>&1 | grep -oP \'(?<=token=)(.+)$\' | head -1'.format(name=name),
        shell=True).decode('utf8').strip()
    print('\nSee: http://localhost:{port}/tree?token={token}'.format(port=port, token=token))


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Development runner for preem')
    parser.set_defaults(action=lambda: parser.print_help())
    subs = parser.add_subparsers()

    subs.add_parser('build', help='build the Docker image').set_defaults(action=build)
    p = subs.add_parser('run', help='run an arbitrary command in the image')
    p.add_argument('args', nargs='*', help='command/arguments to pass to the image')
    p.set_defaults(action=run)
    p = subs.add_parser('test', help='run unit tests')
    p.add_argument('-v', '--verbose', action='store_true', help='make the output more verbose')
    p.add_argument('--slow', action='store_true', help='turn on slow (fuzz) tests')
    p.add_argument('-k', '--filter', help='filter tests matching this pattern')
    p.set_defaults(action=test)
    subs.add_parser('check', help='run all checks (including slow tests)').set_defaults(action=check)
    p = subs.add_parser('docs', help='generate documentation')
    p.add_argument('--examples', action='store_true', help='re-render the documentation examples')
    p.add_argument('--pydoc-only', action='store_true', help='only generate the Python API docs')
    p.set_defaults(action=docs)
    p = subs.add_parser('notebook', help='run dev notebook')
    p.add_argument('--port', default='8888', help='port to serve on')
    p.set_defaults(action=notebook)

    args = vars(parser.parse_args())
    args.pop('action')(**args)
